<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Bartlomiej Mika</title><link>https://bartmika.github.io/categories/go/</link><description>Recent content in go on Bartlomiej Mika</description><generator>Hugo -- gohugo.io</generator><managingEditor>bart@mikasoftware.com (Bartlomiej Mika)</managingEditor><webMaster>bart@mikasoftware.com (Bartlomiej Mika)</webMaster><lastBuildDate>Mon, 25 Jan 2021 00:02:30 -0400</lastBuildDate><atom:link href="https://bartmika.github.io/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Write a Webserver in Golang - Part 1</title><link>https://bartmika.github.io/posts/2021/how-to-write-a-webserver-in-golang-part-1/</link><pubDate>Mon, 25 Jan 2021 00:02:30 -0400</pubDate><author>bart@mikasoftware.com (Bartlomiej Mika)</author><guid>https://bartmika.github.io/posts/2021/how-to-write-a-webserver-in-golang-part-1/</guid><description>&lt;p>&lt;img src="https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;h=650&amp;amp;w=940" alt="">&lt;/p>
&lt;p>The purpose of this article is to provide instructions on how to setup a simple RESTful API server, in Golang, using the standard library and not any other third-party web framework. You will know how to create REST endpoints within your project that can handle &lt;strong>POST&lt;/strong>, &lt;strong>GET&lt;/strong>, &lt;strong>PUT&lt;/strong> and &lt;strong>DELETE&lt;/strong> HTTP requests.&lt;/p></description></item></channel></rss>