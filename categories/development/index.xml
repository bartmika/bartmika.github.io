<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on Bartlomiej Mika</title><link>https://bartmika.github.io/categories/development/</link><description>Recent content in development on Bartlomiej Mika</description><generator>Hugo -- gohugo.io</generator><managingEditor>bart@mikasoftware.com (Bartlomiej Mika)</managingEditor><webMaster>bart@mikasoftware.com (Bartlomiej Mika)</webMaster><lastBuildDate>Wed, 09 Sep 2020 22:11:07 -0400</lastBuildDate><atom:link href="https://bartmika.github.io/categories/development/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Install Hugo From Git Bash for Window Users</title><link>https://bartmika.github.io/posts/2020/how-to-install-hugo-from-git-bash-for-window-users/</link><pubDate>Wed, 09 Sep 2020 22:11:07 -0400</pubDate><author>bart@mikasoftware.com (Bartlomiej Mika)</author><guid>https://bartmika.github.io/posts/2020/how-to-install-hugo-from-git-bash-for-window-users/</guid><description>&lt;p>The purpose of this article is to help beginners understand how to do the &lt;a href="https://github.com/gohugoio/hugo#build-and-install-the-binaries-from-source-advanced-install">advanced install&lt;/a> of &lt;code>hugo&lt;/code> static site generator (SSG).&lt;/p></description></item><item><title>How to Start a Personal Blog With Hugo a Static Site Generator Written in Go (Part 1)</title><link>https://bartmika.github.io/posts/2020/how-to-start-a-personal-blog-with-hugo-a-static-site-generator-written-in-go-part-1/</link><pubDate>Mon, 07 Sep 2020 15:35:07 -0400</pubDate><author>bart@mikasoftware.com (Bartlomiej Mika)</author><guid>https://bartmika.github.io/posts/2020/how-to-start-a-personal-blog-with-hugo-a-static-site-generator-written-in-go-part-1/</guid><description>&lt;p>The purpose of this article is to help you setup a personal blog as quickly as possible. These are the instructions and notes I&amp;rsquo;ve written down when setting up my site that I&amp;rsquo;d like to share.&lt;/p></description></item><item><title>How to Write a Unit Test for a Remote Procedural Call in Golang</title><link>https://bartmika.github.io/posts/2020/how-to-write-a-unit-test-for-a-remote-procedural-call-in-golang/</link><pubDate>Thu, 13 Aug 2020 23:14:55 -0400</pubDate><author>bart@mikasoftware.com (Bartlomiej Mika)</author><guid>https://bartmika.github.io/posts/2020/how-to-write-a-unit-test-for-a-remote-procedural-call-in-golang/</guid><description>&lt;p>Recently I have been learning about &lt;strong>remote procedural calls&lt;/strong> (RPCs) in *&lt;em>Golang&lt;/em> and realized I was unable to find an easy example on how to write a unit test for RPCs. In this post, I&amp;rsquo;ll explain how I figured out a solution.&lt;/p></description></item></channel></rss>