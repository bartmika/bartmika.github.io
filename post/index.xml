<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Bartlomiej Mika</title><link>https://bartmika.github.io/post/</link><description>Recent content in Posts on Bartlomiej Mika</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 31 Jan 2021 00:02:30 -0400</lastBuildDate><atom:link href="https://bartmika.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>How to write a webserver in Golang using only the std net/http - Part 4</title><link>https://bartmika.github.io/post/2021/how-to-write-a-webserver-in-golang-using-only-the-std-net-http-part-4/</link><pubDate>Sun, 31 Jan 2021 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2021/how-to-write-a-webserver-in-golang-using-only-the-std-net-http-part-4/</guid><description>&lt;!-- ![](https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940) -->
&lt;p>The purpose of this article is to provide instructions on how utilize sessions and authentication.&lt;/p></description></item><item><title>How to write a webserver in Golang using only the std net/http - Part 3</title><link>https://bartmika.github.io/post/2021/how-to-write-a-webserver-in-golang-using-only-the-std-net-http-part-3/</link><pubDate>Sat, 30 Jan 2021 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2021/how-to-write-a-webserver-in-golang-using-only-the-std-net-http-part-3/</guid><description>&lt;!-- ![](https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940) -->
&lt;p>The purpose of this article is to provide instructions on how to setup &lt;em>postgres&lt;/em> database with our application.&lt;/p></description></item><item><title>How to write a webserver in Golang using only the std net/http - Part 2</title><link>https://bartmika.github.io/post/2021/how-to-write-a-webserver-in-golang-using-only-the-std-net-http-part-2/</link><pubDate>Fri, 29 Jan 2021 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2021/how-to-write-a-webserver-in-golang-using-only-the-std-net-http-part-2/</guid><description>&lt;!-- ![](https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940) -->
&lt;p>The purpose of this article is to provide instructions on how to read body of &lt;em>request&lt;/em> and use a &lt;em>primitive database&lt;/em>.&lt;/p></description></item><item><title>How to write a webserver in Golang using only the std net/http - Part 1</title><link>https://bartmika.github.io/post/2021/how-to-write-a-webserver-in-golang-using-only-the-std-net-http-part-1/</link><pubDate>Mon, 25 Jan 2021 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2021/how-to-write-a-webserver-in-golang-using-only-the-std-net-http-part-1/</guid><description>&lt;!-- ![](https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940) -->
&lt;p>The purpose of this article is to provide instructions on how to setup a simple RESTful API server, in Golang, using the standard library and not any other third-party web framework. You will know how to create REST endpoints within your project that can handle &lt;strong>POST&lt;/strong>, &lt;strong>GET&lt;/strong>, &lt;strong>PUT&lt;/strong> and &lt;strong>DELETE&lt;/strong> HTTP requests.&lt;/p></description></item><item><title>How to Install Hugo From Git Bash for Window Users</title><link>https://bartmika.github.io/post/2020/how-to-install-hugo-from-git-bash-for-window-users/</link><pubDate>Wed, 09 Sep 2020 22:11:07 -0400</pubDate><guid>https://bartmika.github.io/post/2020/how-to-install-hugo-from-git-bash-for-window-users/</guid><description>&lt;p>The purpose of this article is to help beginners understand how to do the &lt;a href="https://github.com/gohugoio/hugo#build-and-install-the-binaries-from-source-advanced-install">advanced install&lt;/a> of &lt;a href="https://github.com/gohugoio/hugo">&lt;code>hugo&lt;/code>&lt;/a> static site generator (SSG).&lt;/p></description></item><item><title>How to Start a Personal Blog With Hugo a Static Site Generator Written in Go (Part 2)</title><link>https://bartmika.github.io/post/2020/how-to-start-a-personal-blog-with-hugo-a-static-site-generator-written-in-go-part-2/</link><pubDate>Mon, 07 Sep 2020 15:35:08 -0400</pubDate><guid>https://bartmika.github.io/post/2020/how-to-start-a-personal-blog-with-hugo-a-static-site-generator-written-in-go-part-2/</guid><description>&lt;p>The purpose of this article is to help you deploy your website to the internet.&lt;/p></description></item><item><title>How to Start a Personal Blog With Hugo a Static Site Generator Written in Go (Part 1)</title><link>https://bartmika.github.io/post/2020/how-to-start-a-personal-blog-with-hugo-a-static-site-generator-written-in-go-part-1/</link><pubDate>Mon, 07 Sep 2020 15:35:07 -0400</pubDate><guid>https://bartmika.github.io/post/2020/how-to-start-a-personal-blog-with-hugo-a-static-site-generator-written-in-go-part-1/</guid><description>&lt;p>The purpose of this article is to help you setup a personal blog as quickly as possible. These are the instructions and notes I&amp;rsquo;ve written down when setting up my site that I&amp;rsquo;d like to share.&lt;/p></description></item><item><title>How to Write a Unit Test for a Remote Procedural Call in Golang</title><link>https://bartmika.github.io/post/2020/how-to-write-a-unit-test-for-a-remote-procedural-call-in-golang/</link><pubDate>Thu, 13 Aug 2020 23:14:55 -0400</pubDate><guid>https://bartmika.github.io/post/2020/how-to-write-a-unit-test-for-a-remote-procedural-call-in-golang/</guid><description>&lt;p>Recently I have been learning about &lt;strong>remote procedural calls&lt;/strong> (RPCs) in *&lt;em>Golang&lt;/em> and realized I was unable to find an easy example on how to write a unit test for RPCs. In this post, I&amp;rsquo;ll explain how I figured out a solution.&lt;/p></description></item><item><title>How to Setup Peercoin on Raspberry Pi for Headless Minting</title><link>https://bartmika.github.io/post/2020/how-to-setup-peercoin-on-raspberry-pi-for-headless-minting/</link><pubDate>Sun, 26 Jul 2020 12:15:15 -0400</pubDate><guid>https://bartmika.github.io/post/2020/how-to-setup-peercoin-on-raspberry-pi-for-headless-minting/</guid><description>&lt;p>Would you believe you can participate in cryptocurrency production using a simple Raspberry Pi computer? No need for powerful ASIC miners! Peercoin is an interesting altcoin that has &lt;strong>minting&lt;/strong> capability built-in, and minting is the ability to create new coins from the ones you already have. In this tutorial, you&amp;rsquo;ll learn how to set up a dedicated Raspberry Pi computer to mint the Peercoins in your wallet.&lt;/p></description></item><item><title>Hello World</title><link>https://bartmika.github.io/post/2020/hello-world/</link><pubDate>Sat, 11 Jul 2020 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2020/hello-world/</guid><description>&lt;p>&lt;img src="https://images.pexels.com/photos/459225/pexels-photo-459225.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;h=650&amp;amp;w=940" alt="">&lt;/p>
&lt;p>Welcome to my first blog post, I&amp;rsquo;ll explain the purpose of this site, why I started it, and what I hope to accomplish.&lt;/p></description></item></channel></rss>