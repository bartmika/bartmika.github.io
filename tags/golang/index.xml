<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Bartlomiej Mika</title><link>https://bartmika.github.io/tags/golang/</link><description>Recent content in Golang on Bartlomiej Mika</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 31 Jan 2021 00:02:30 -0400</lastBuildDate><atom:link href="https://bartmika.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Build an API Server in Go - Part 4: Access Control</title><link>https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-4-access-control/</link><pubDate>Sun, 31 Jan 2021 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-4-access-control/</guid><description>&lt;!-- ![](https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940) -->
&lt;p>Learn how to protect API endpoints with access and refresh tokens using the third-party &lt;a href="https://github.com/dgrijalva/jwt-go">jwt-go&lt;/a> library.&lt;/p></description></item><item><title>How to Build an API Server in Go - Part 3: Postgres Database</title><link>https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-3-postgres-database/</link><pubDate>Sat, 30 Jan 2021 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-3-postgres-database/</guid><description>&lt;!-- ![](https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940) -->
&lt;p>The purpose of this article is to provide instructions on how to setup &lt;em>postgres&lt;/em> database with our application.&lt;/p></description></item><item><title>How to Build an API Server in Go - Part 2: Simple Database</title><link>https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-2-simple-database/</link><pubDate>Fri, 29 Jan 2021 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-2-simple-database/</guid><description>&lt;!-- ![](https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940) -->
&lt;p>The purpose of this post is to learn how our &lt;a href="https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-1-basic-server/">basic API server&lt;/a> can read the body of a &lt;em>request&lt;/em>. In addition, we will learn how to use an easy-to-use &lt;em>simple database&lt;/em> for beginners called &lt;a href="https://github.com/sdomino/scribble">scribble&lt;/a>.&lt;/p></description></item><item><title>How to Build an API Server in Go - Part 1: Basic Server</title><link>https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-1-basic-server/</link><pubDate>Mon, 25 Jan 2021 00:02:30 -0400</pubDate><guid>https://bartmika.github.io/post/2021/how-to-build-an-api-server-in-go-part-1-basic-server/</guid><description>&lt;!-- ![](https://images.pexels.com/photos/5582597/pexels-photo-5582597.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940) -->
&lt;p>The purpose of this post is to provide instructions on how to setup a simple RESTful API server, in Golang, using only the &lt;a href="https://golang.org/pkg/net/http/">&lt;em>net/http&lt;/em> package&lt;/a> and not any other third-party web framework. You will learn how to create REST endpoints within your project that can handle &lt;strong>POST&lt;/strong>, &lt;strong>GET&lt;/strong>, &lt;strong>PUT&lt;/strong> and &lt;strong>DELETE&lt;/strong> HTTP requests. This is the first post in a multi-post series.&lt;/p></description></item><item><title>How to Install Hugo From Git Bash for Window Users</title><link>https://bartmika.github.io/post/2020/how-to-install-hugo-from-git-bash-for-window-users/</link><pubDate>Wed, 09 Sep 2020 22:11:07 -0400</pubDate><guid>https://bartmika.github.io/post/2020/how-to-install-hugo-from-git-bash-for-window-users/</guid><description>&lt;p>The purpose of this article is to help beginners understand how to do the &lt;a href="https://github.com/gohugoio/hugo#build-and-install-the-binaries-from-source-advanced-install">advanced install&lt;/a> of &lt;a href="https://github.com/gohugoio/hugo">&lt;code>hugo&lt;/code>&lt;/a> static site generator (SSG).&lt;/p></description></item><item><title>How to Start a Personal Blog With Hugo a Static Site Generator Written in Go (Part 1)</title><link>https://bartmika.github.io/post/2020/how-to-start-a-personal-blog-with-hugo-a-static-site-generator-written-in-go-part-1/</link><pubDate>Mon, 07 Sep 2020 15:35:07 -0400</pubDate><guid>https://bartmika.github.io/post/2020/how-to-start-a-personal-blog-with-hugo-a-static-site-generator-written-in-go-part-1/</guid><description>&lt;p>The purpose of this article is to help you setup a personal blog as quickly as possible. These are the instructions and notes I&amp;rsquo;ve written down when setting up my site that I&amp;rsquo;d like to share.&lt;/p></description></item><item><title>How to Write a Unit Test for a Remote Procedural Call in Golang</title><link>https://bartmika.github.io/post/2020/how-to-write-a-unit-test-for-a-remote-procedural-call-in-golang/</link><pubDate>Thu, 13 Aug 2020 23:14:55 -0400</pubDate><guid>https://bartmika.github.io/post/2020/how-to-write-a-unit-test-for-a-remote-procedural-call-in-golang/</guid><description>&lt;p>Recently I have been learning about &lt;strong>remote procedural calls&lt;/strong> (RPCs) in *&lt;em>Golang&lt;/em> and realized I was unable to find an easy example on how to write a unit test for RPCs. In this post, I&amp;rsquo;ll explain how I figured out a solution.&lt;/p></description></item></channel></rss>