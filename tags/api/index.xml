<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API on Bartlomiej Mika</title>
    <link>https://bartlomiejmika.com/tags/api/</link>
    <description>Recent content in API on Bartlomiej Mika</description>
    <image>
      <url>https://bartlomiejmika.com/img/bartlomiej_mika.jpeg</url>
      <link>https://bartlomiejmika.com/img/bartlomiej_mika.jpeg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 31 Jan 2021 00:02:30 -0400</lastBuildDate><atom:link href="https://bartlomiejmika.com/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Build an API Server in Go - Part 4: Access Control</title>
      <link>https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-4-access-control/</link>
      <pubDate>Sun, 31 Jan 2021 00:02:30 -0400</pubDate>
      
      <guid>https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-4-access-control/</guid>
      <description>&lt;p&gt;Learn how to protect API endpoints with access and refresh tokens using the third-party &lt;a href=&#34;https://github.com/dgrijalva/jwt-go&#34;&gt;jwt-go&lt;/a&gt; library.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Build an API Server in Go - Part 3: Postgres Database</title>
      <link>https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-3-postgres-database/</link>
      <pubDate>Sat, 30 Jan 2021 00:02:30 -0400</pubDate>
      
      <guid>https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-3-postgres-database/</guid>
      <description>&lt;p&gt;The purpose of this article is to provide instructions on how to setup &lt;em&gt;postgres&lt;/em&gt; database with our application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Build an API Server in Go - Part 2: Simple Database</title>
      <link>https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-2-simple-database/</link>
      <pubDate>Fri, 29 Jan 2021 00:02:30 -0400</pubDate>
      
      <guid>https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-2-simple-database/</guid>
      <description>&lt;p&gt;The purpose of this post is to learn how our &lt;a href=&#34;https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-1-basic-server/&#34;&gt;basic API server&lt;/a&gt; can read the body of a &lt;em&gt;request&lt;/em&gt;. In addition, we will learn how to use an easy-to-use &lt;em&gt;simple database&lt;/em&gt; for beginners called &lt;a href=&#34;https://github.com/sdomino/scribble&#34;&gt;scribble&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Build an API Server in Go - Part 1: Basic Server</title>
      <link>https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-1-basic-server/</link>
      <pubDate>Mon, 25 Jan 2021 00:02:30 -0400</pubDate>
      
      <guid>https://bartlomiejmika.com/posts/2021/how-to-build-an-api-server-in-go-part-1-basic-server/</guid>
      <description>&lt;p&gt;The purpose of this post is to provide instructions on how to setup a simple RESTful API server, in Golang, using only the &lt;a href=&#34;https://golang.org/pkg/net/http/&#34;&gt;&lt;em&gt;net/http&lt;/em&gt; package&lt;/a&gt; and not any other third-party web framework. You will learn how to create REST endpoints within your project that can handle &lt;strong&gt;POST&lt;/strong&gt;, &lt;strong&gt;GET&lt;/strong&gt;, &lt;strong&gt;PUT&lt;/strong&gt; and &lt;strong&gt;DELETE&lt;/strong&gt; HTTP requests. This is the first post in a multi-post series.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
