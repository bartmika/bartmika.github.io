<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bartlomiej Mika</title><link>https://bartlomiejmika.com/</link><description>Bartlomiej Mika</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 13 Aug 2020 23:14:55 -0400</lastBuildDate><atom:link href="https://bartlomiejmika.com/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Write a Unit Test for a Remote Procedural Call in Golang</title><link>https://bartlomiejmika.com/posts/2020/08/13/how-to-write-a-unit-test-for-a-remote-procedural-call-in-golang/</link><pubDate>Thu, 13 Aug 2020 23:14:55 -0400</pubDate><guid>https://bartlomiejmika.com/posts/2020/08/13/how-to-write-a-unit-test-for-a-remote-procedural-call-in-golang/</guid><description>&lt;p>Recently I have been learning about &lt;strong>remote procedural calls&lt;/strong> (RPCs) in *&lt;em>Golang&lt;/em> and realized I was unable to find an easy example on how to write a unit test for RPCs. In this post, I&amp;rsquo;ll explain how I figured out a solution.&lt;/p>
&lt;h2 id="assumption">Assumption&lt;/h2>
&lt;p>Before I begin, I am assuming you are just starting to learn about &lt;strong>remote procedural calls&lt;/strong> (RPCs) and you don&amp;rsquo;t know how you would go about writing a single unit test.&lt;/p>
&lt;h2 id="what-is-a-remote-procedural-call">What is a remote procedural call?&lt;/h2>
&lt;p>According to &lt;a href="https://en.wikipedia.org/wiki/Remote_procedure_call">this Wikipedia article&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>a &lt;strong>remote procedure call (RPC)&lt;/strong> is when a computer program causes a procedure (subroutine) to execute in a different address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction. That is, the programmer writes essentially the same code whether the subroutine is local to the executing program, or remote.&lt;/p>
&lt;/blockquote>
&lt;p>So in essence you can write a bunch of &lt;strong>functions&lt;/strong> in your application, serve these functions over the network and other programmers can call your functions locally on their computer and not worry about the network interaction - &lt;em>how cool is that&lt;/em>?&lt;/p>
&lt;h2 id="how-does-rpc-work-in-golang">How does RPC work in Golang?&lt;/h2>
&lt;p>I will skip this section and refer you to an excellent resource I used to learn how RPC works in Golang. Please checkout &lt;a href="https://tumregels.github.io/Network-Programming-with-Go/rpc/go_rpc.html">Chapter 13 Remote Procedure Call via
&amp;ldquo;Network Programming with Go&amp;rdquo; by Levon&lt;/a>.&lt;/p>
&lt;h2 id="how-to-unit-test">How to Unit Test?&lt;/h2>
&lt;p>Let&amp;rsquo;s pretend you have written the following RPC methods which you want to serve in your RPC server:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// mathrpc.go
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">mathrpc&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Args&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Quotient&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Quo&lt;/span>, &lt;span style="color:#a6e22e">Rem&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Arith&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Arith&lt;/span>) &lt;span style="color:#a6e22e">Multiply&lt;/span>(&lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Args&lt;/span>, &lt;span style="color:#a6e22e">reply&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span> = &lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Arith&lt;/span>) &lt;span style="color:#a6e22e">Divide&lt;/span>(&lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Args&lt;/span>, &lt;span style="color:#a6e22e">quo&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Quotient&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;divide by zero&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">quo&lt;/span>.&lt;span style="color:#a6e22e">Quo&lt;/span> = &lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>
&lt;span style="color:#a6e22e">quo&lt;/span>.&lt;span style="color:#a6e22e">Rem&lt;/span> = &lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>How would you unit test the above code? You can write code as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">//mathrpc_test.go
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">mathrpc&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/stretchr/testify/assert&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestMultiplyWithSuccess&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#75715e">// Setup our test.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arith&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">Arith&lt;/span>)
&lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Args&lt;/span>{&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">reply&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#75715e">// Perform our operation.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">arith&lt;/span>.&lt;span style="color:#a6e22e">Multiply&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">args&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span>)
&lt;span style="color:#75715e">// Perform our validation
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">NoError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">Equal&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">reply&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Did not multiply correctly!`&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestDivideWithSuccess&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#75715e">// Setup our test.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arith&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> new(&lt;span style="color:#a6e22e">Arith&lt;/span>)
&lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Args&lt;/span>{&lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">reply&lt;/span> &lt;span style="color:#a6e22e">Quotient&lt;/span>
&lt;span style="color:#75715e">// Perform our operation.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">arith&lt;/span>.&lt;span style="color:#a6e22e">Divide&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">args&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span>)
&lt;span style="color:#75715e">// Perform our validation
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">NoError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">Equal&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#a6e22e">reply&lt;/span>.&lt;span style="color:#a6e22e">Quo&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Did not return correct quotient`&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">Equal&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#ae81ff">125&lt;/span>, &lt;span style="color:#a6e22e">reply&lt;/span>.&lt;span style="color:#a6e22e">Rem&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Did not return correct remainder`&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, it&amp;rsquo;s not too difficult to write a unit test on an RPC; in essence, you can treat the RPC function as if was a plain function and write a plain unit test on it.&lt;/p></description></item><item><title>How to Setup Peercoin on Raspberry Pi for Headless Minting</title><link>https://bartlomiejmika.com/posts/2020/07/26/how-to-setup-peercoin-on-raspberry-pi-for-headless-minting/</link><pubDate>Sun, 26 Jul 2020 12:15:15 -0400</pubDate><guid>https://bartlomiejmika.com/posts/2020/07/26/how-to-setup-peercoin-on-raspberry-pi-for-headless-minting/</guid><description>&lt;p>Would you believe you can participate in cryptocurrency production using a simple Raspberry Pi computer? No need for powerful ASIC miners! Peercoin is an interesting altcoin that has &lt;strong>minting&lt;/strong> capability built-in, and minting is the ability to create new coins from the ones you already have. In this tutorial, you&amp;rsquo;ll learn how to set up a dedicated Raspberry Pi computer to mint the Peercoins in your wallet.&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;/h2>
&lt;p>This guide assumes the following:&lt;/p>
&lt;ul>
&lt;li>You&amp;rsquo;ve downloaded &lt;a href="https://www.raspberrypi.org/downloads/raspbian/">Raspbian Lite ISO image&lt;/a>.&lt;/li>
&lt;li>You&amp;rsquo;ve burned the image on the SDCard and you have some experience working with the Raspberry Pi computer&lt;/li>
&lt;li>You&amp;rsquo;ve installed &lt;code>Peercoin&lt;/code> on your computer and you want to transfer your &lt;code>wallet.dat&lt;/code> file to your Raspberry Pi computer.&lt;/li>
&lt;li>You already have some Peercoins in your wallet.&lt;/li>
&lt;/ul>
&lt;p>This guide has been confirmed working on:&lt;/p>
&lt;ul>
&lt;li>Pi 2 Model B v1.1 1GB a21041 (Embest, China) &lt;a href="https://www.raspberrypi-spy.co.uk/2012/09/checking-your-raspberry-pi-board-version/">*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/peercoin/peercoin/releases">Peercoin Daemon version v0.8.1.0&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="instructions">Instructions&lt;/h2>
&lt;h3 id="optional-changing-the-host-on-your-pi">(Optional) Changing the Host on your Pi&lt;/h3>
&lt;p>The following section was taken from &lt;a href="https://www.howtogeek.com/167195/how-to-change-your-raspberry-pi-or-other-linux-devices-hostname/">this link&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open up this file.&lt;/p>
&lt;pre>&lt;code>sudo nano /etc/hosts
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Leave all of the entries alone except for the very last entry labeled 127.0.1.1 with the hostname &lt;code>raspberrypi&lt;/code>. This is the only line you want to edit. Replace “raspberrypi” with whatever hostname you desire. I named my computer &lt;code>peercoin-pi&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Back at the terminal, type the following command to open the hostname file:&lt;/p>
&lt;pre>&lt;code>sudo nano /etc/hostname
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Replace the default “raspberrypi” with the same hostname you put in the previous step (e.g. &lt;code>peercoin-pi&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commit our changes.&lt;/p>
&lt;pre>&lt;code>sudo /etc/init.d/hostname.sh
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Reboot the computer.&lt;/p>
&lt;pre>&lt;code>sudo reboot
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="improve-security">Improve security&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Install firewall.&lt;/p>
&lt;pre>&lt;code>sudo apt-get install git ufw
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Enable firewall and allow only ssh access&lt;/p>
&lt;pre>&lt;code>sudo ufw allow 22
sudo ufw allow 9901
sudo ufw --force enable
sudo ufw status
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>To add more security, read &lt;a href="https://www.raspberrypi.org/documentation/configuration/security.md">this link&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="swap">Swap&lt;/h3>
&lt;p>The following section was inspired by &lt;a href="http://raspberrypimaker.com/adding-swap-to-the-raspberrypi/">this article&lt;/a>. Please be warned that running the following code can shorten the life-span of your SDCard.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Configure using the following.&lt;/p>
&lt;pre>&lt;code>sudo dd if=/dev/zero of=/swapfile bs=64M count=16
sudo mkswap /swapfile
sudo swapon /swapfile
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>(Optional) Stop our &lt;code>swap&lt;/code> memory and remove it.&lt;/p>
&lt;pre>&lt;code>sudo swapoff /swapfile
sudo rm -f /swapfile
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>(Optional) Make the swap memory permanent on every boot.&lt;/p>
&lt;pre>&lt;code>sudo vi /etc/fstab
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>(Optional) Append the contents:&lt;/p>
&lt;pre>&lt;code>/swapfile none swap defaults 0 0
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="peercoin">Peercoin&lt;/h3>
&lt;h4 id="build-executable">Build Executable&lt;/h4>
&lt;p>Please note these instructions where taken from &lt;a href="https://github.com/peercoin/peercoin/blob/master/doc/build-unix.md">this section&lt;/a>. The following instructions are to be run on your raspberry pi.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Update the libraries.&lt;/p>
&lt;pre>&lt;code>sudo apt-get update
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Install build requirements:&lt;/p>
&lt;pre>&lt;code>sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Install more requirements&lt;/p>
&lt;pre>&lt;code>sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>(Optional) If above command doesn&amp;rsquo;t work, you can install all boost development packages with:&lt;/p>
&lt;pre>&lt;code>sudo apt-get install libboost-all-dev
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>According to &lt;a href="https://github.com/peercoin/peercoin/blob/master/doc/build-unix.md#arm-cross-compilation">this link&lt;/a>, we are compiling on &lt;code>arm&lt;/code> processor so we need to run:&lt;/p>
&lt;pre>&lt;code>sudo apt-get install g++-arm-linux-gnueabihf curl
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Install &lt;code>git&lt;/code> because it’s not installed.&lt;/p>
&lt;pre>&lt;code>sudo apt-get install git
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Clone &lt;a href="https://github.com/peercoin/peercoin">Peercoin&lt;/a> to our home directory.&lt;/p>
&lt;pre>&lt;code>cd /home/pi
git clone https://github.com/ppcoin/ppcoin.git
``
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>To build our dependencies for &lt;code>arm&lt;/code>, according to &lt;a href="https://github.com/peercoin/peercoin/blob/master/doc/build-unix.md#arm-cross-compilation">this link&lt;/a>, then run the following:&lt;/p>
&lt;pre>&lt;code>cd depends
make HOST=arm-linux-gnueabihf NO_QT=1
cd ..
./configure --prefix=$PWD/depends/arm-linux-gnueabihf --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++
make
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>To build our executable for &lt;code>arm&lt;/code>, according to &lt;a href="https://github.com/peercoin/peercoin/blob/master/doc/build-unix.md#arm-cross-compilation">this link&lt;/a>, then run the following:&lt;/p>
&lt;pre>&lt;code>./autogen.sh
./configure
make
make install # optional
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h4 id="setup-and-run-executable">Setup and Run Executable&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>Upload the &lt;code>wallet.dat&lt;/code> file on your computer to your raspberry pi.&lt;/p>
&lt;pre>&lt;code>rsync -avz ~/Desktop/wallet.dat pi@192.168.1.10:/home/pi/.peercoin/wallets/wallet.dat
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Run the following code to confirm the &lt;code>Peercoin&lt;/code> daemon starts running in the background.&lt;/p>
&lt;pre>&lt;code>cd /home/pi/ppcoin/src
./peercoind -listen=0 -daemon -server
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>If the daemon loads up then you have successfully built the executable.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="optional-run-peercoind-in-background">(Optional) Run &lt;code>peercoind&lt;/code> in background&lt;/h4>
&lt;p>This section had assistance from &lt;a href="https://raspi.tv/2012/using-screen-with-raspberry-pi-to-avoid-leaving-ssh-sessions-open">this link&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install &lt;code>screen&lt;/code>.&lt;/p>
&lt;pre>&lt;code>sudo apt-get install screen
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Open up our screen session.&lt;/p>
&lt;pre>&lt;code>screen bash
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Start our session.&lt;/p>
&lt;pre>&lt;code> cd /home/pi/ppcoin/src
./peercoind -listen=0 -daemon -server
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Detach the screen session so it runs in the background. Enter &lt;code>CTRL&lt;/code> plus &lt;code>A&lt;/code> then &lt;code>D&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Confirm our background process is running.&lt;/p>
&lt;pre>&lt;code>screen -list
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>(Optional) If you would like to resume your background session then run the following, else skip this step.&lt;/p>
&lt;pre>&lt;code>screen -r
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Confirm our daemon is running in background by running the following command. (Don&amp;rsquo;t forget to run &lt;code>CTRL&lt;/code> plus &lt;code>X&lt;/code> when you finish)&lt;/p>
&lt;pre>&lt;code>top | grep peercoin
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>(Optional) If you get any error, please investigate the &lt;code>debug.log&lt;/code> file by running the following.&lt;/p>
&lt;pre>&lt;code>~/.peercoin/debug.log
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h4 id="start-peercoind-on-system-startup">Start &lt;code>peercoind&lt;/code> on system startup&lt;/h4>
&lt;p>We are going to create a service in &lt;code>systemd&lt;/code> to have our &lt;code>peercoind&lt;/code> startup on boot time.&lt;/p>
&lt;p>&lt;strong>DEVELOPERS NOTE: For some reason the following code does not want to work. If someone can comment on how to fix this, that would be great!&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>While being logged in as &lt;code>pi&lt;/code> run the following:&lt;/p>
&lt;pre>&lt;code>cd ~/
touch peercoind_startup.sh
vi peercoind_startup.sh
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Populate the contents of our new file with the following&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
cd /home/pi/ppcoin/src
./peercoind -listen=0 -daemon -server
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Permit to run our script.&lt;/p>
&lt;pre>&lt;code>chmod u+x peercoind_startup.sh
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Create our &lt;code>systemd&lt;/code> service to handle loading our startup script.&lt;/p>
&lt;pre>&lt;code>sudo vi /etc/systemd/system/peercoind.service
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Copy and paste the following contents.&lt;/p>
&lt;pre>&lt;code>[Unit]
Description=Peercoin Daemon
After=multi-user.target
[Service]
Type=idle
ExecStart=/home/pi/peercoind_startup.sh
Restart=on-failure
KillSignal=SIGTERM
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>We can now start the Gunicorn service we created and enable it so that it starts at boot:&lt;/p>
&lt;pre>&lt;code>sudo systemctl start peercoind
sudo systemctl enable peercoind
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Confirm our service is running.&lt;/p>
&lt;pre>&lt;code>sudo systemctl status peercoind.service
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>If the service is working correctly you should see something like this at the bottom:&lt;/p>
&lt;pre>&lt;code>raspberrypi systemd[1]: Started Peercoin Daemon.
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Congratulations, you have set up a Peercoin headless minter service.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you see any problems, run the following service to see what is wrong. More information can be found in &lt;a href="https://unix.stackexchange.com/a/225407">this article&lt;/a>.&lt;/p>
&lt;pre>&lt;code>sudo journalctl -u peercoind
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>To reload the latest modifications to &lt;code>systemctl&lt;/code> file.&lt;/p>
&lt;pre>&lt;code>sudo systemctl daemon-reload
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h1 id="donate">Donate&lt;/h1>
&lt;p>If you found this article useful, please consider donating:&lt;/p>
&lt;ul>
&lt;li>Peercoin &lt;code>PXTyiBqraYCn95cvEP2jcoCfYEBscNHxBW&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Hello World</title><link>https://bartlomiejmika.com/posts/2020/07/10/hello-world/</link><pubDate>Sat, 11 Jul 2020 00:02:30 -0400</pubDate><guid>https://bartlomiejmika.com/posts/2020/07/10/hello-world/</guid><description>&lt;p>&lt;img src="https://images.pexels.com/photos/459225/pexels-photo-459225.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;h=650&amp;amp;w=940" alt="">&lt;/p>
&lt;p>Welcome to my first blog post, I&amp;rsquo;ll explain the purpose of this site, why I started it, and what I hope to accomplish.&lt;/p>
&lt;h1 id="hello-and-welcome">Hello and welcome!&lt;/h1>
&lt;p>My name is Bartlomiej Mika, I am a technical consultant at [Mika Software Corporation] and welcome to my first blog post.&lt;/p>
&lt;p>I am a big fan of reading &lt;a href="">Hacker News&lt;/a> for my tech news but recently an article titled &lt;a href="https://archive.is/xbFqF">&amp;ldquo;Why you (yes, you) should blog&lt;/a> has inspired me to create this blog!&lt;/p>
&lt;h2 id="purpose">Purpose&lt;/h2>
&lt;p>The purpose of this website is as follows.&lt;/p>
&lt;h3 id="1--share-knowledge">1. Share Knowledge&lt;/h3>
&lt;p>As I learn new things I want to share the lessons learned.&lt;/p>
&lt;h3 id="2-centralize-content">2. Centralize Content&lt;/h3>
&lt;p>Over the years I have written various articles across different websites but always scattered across the web; sometimes the content written gets lost over time for various reasons such as:&lt;/p>
&lt;ul>
&lt;li>Site owners delete data&lt;/li>
&lt;li>Sites lose data&lt;/li>
&lt;li>Sites shutdown&lt;/li>
&lt;li>Content gets &amp;ldquo;curated&amp;rdquo; out&lt;/li>
&lt;/ul>
&lt;p>As a result, this site will be that single location to centralize my content and make it easy-to-find for users.&lt;/p>
&lt;h2 id="3-improve-technical-communication">3. Improve Technical Communication&lt;/h2>
&lt;p>I want to improve my technical communication writing articles.&lt;/p>
&lt;h3 id="4-personalized-site">4. Personalized Site&lt;/h3>
&lt;p>I miss the old world wide web that I remember in the &amp;rsquo;90s. I miss the creativity, the ingenuity, and quirkiness of personal websites that you would typically find from individuals before giant websites like &lt;a href="https://facebook.com">Facebook&lt;/a> or &lt;a href="https://twitter.com">Twitter&lt;/a> came along. In a sense, I hope this website could be an interesting place.&lt;/p>
&lt;h2 id="expected-topics">Expected Topics&lt;/h2>
&lt;p>What sort of topics should you expect?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Programming&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open-Source Libraries&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tutorials&lt;/p>
&lt;/li>
&lt;li>
&lt;p>My Projects&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Personal thoughts about various topics and subjects&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Thank you for visiting and please don&amp;rsquo;t forget to bookmark this site.&lt;/p></description></item><item><title>About</title><link>https://bartlomiejmika.com/about/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://bartlomiejmika.com/about/</guid><description>&lt;p>Written in Go, Hugo is an open source static site generator available under the &lt;a href="https://github.com/gohugoio/hugo/blob/master/LICENSE">Apache Licence 2.0.&lt;/a> Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.&lt;/p>
&lt;p>Hugo makes use of a variety of open source projects including:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/yuin/goldmark">https://github.com/yuin/goldmark&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/alecthomas/chroma">https://github.com/alecthomas/chroma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/muesli/smartcrop">https://github.com/muesli/smartcrop&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/viper">https://github.com/spf13/viper&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.&lt;/p>
&lt;p>Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.&lt;/p>
&lt;p>Websites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.&lt;/p>
&lt;p>Learn more and contribute on &lt;a href="https://github.com/gohugoio">GitHub&lt;/a>.&lt;/p></description></item><item><title>Subpage</title><link>https://bartlomiejmika.com/about/subpage/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://bartlomiejmika.com/about/subpage/</guid><description>&lt;p>Just a subpage of About.&lt;/p></description></item></channel></rss>